<?php

namespace App\Http\Controllers;

use App\Mail\WelcomeEmail;
use App\Models\Message;
use App\Models\User;
use App\Notifications\RegisteredUserNotification;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\Request;
//use Illuminate\Notifications\Notification;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Notification;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Redirect;

class AuthController extends Controller
{
    //
//    public function __call($method, $parameters)
//    {
//        parent::__call($method, $parameters); // TODO: Change the autogenerated stub
//    }



    public function viewUsers(){

        return User::orderBy('id', 'desc')->get();

//        return User::all();
    }


    public function sendWelcomeEmail(): string
    {
//        $user = Auth::user();
//        Mail::to($user->email)->send(new WelcomeEmail()));
        Mail::to('izuchukwuogbonna18@gmail.com')->send(new WelcomeEmail());
        return "Welcome email sent successfully";
    }


    public function weblogout(Request $request)
    {
        Auth::logout();

        return redirect('/login');
    }

    public function register(Request $request) {


        $fields = $request->validate([
            'name' => 'required|string',
            'email' => 'required|string|unique:users,email',
            'password' => 'required|string|confirmed'
        ]);


        $user = User::create([
            'name' => $fields['name'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password']),
        ]);

        $csrf_token = $request->session()->token();

        logger()->info($csrf_token);

        $token = $user->createToken('myapptoken')->plainTextToken;

        event(new Registered($user));


//        $admins = User::where('is_admin', 1)->get();
//
//        $admins = $user;
//        Notification::send($admins, new RegisteredUserNotification($user));
//
        $user = User::where('email', $fields['email'])->first();
        Notification::send($user, new RegisteredUserNotification($user));

////
////        $mailed = $this->sendWelcomeEmail();


        $response = [
            'message' => 'Registration Successful',
            'user' => $user,
            'token' => $token,
            'csrf_token' => $csrf_token
        ];


        return response($response, 201);
        //     "token": "2|xNT0GxOowCgF65TIUL9oRgLkcCarZRS86oE1ovmg"
    }

    public function webregister(Request $request) {
        $fields = $request->validate([
            'name' => 'required|string',
            'email' => 'required|string|unique:users,email',
            'password' => 'required|string|confirmed'
        ]);


        $user = User::create([
            'name' => $fields['name'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password']),
        ]);


        $csrf_token = $request->session()->token();

        logger()->info($csrf_token);

        $token = $user->createToken('myapptoken')->plainTextToken;

        event(new Registered($user));


//        $user = User::where('email', $fields['email'])->first();
        $user = User::where('email', 'toosoft36@gmail.com')->first();
        Notification::send($user, new RegisteredUserNotification($user));

        return redirect('/email/verify');

    }




    public function login(Request $request) {
        $fields = $request->validate([
            'email' => 'required|string',
            'password' => 'required|string'
        ]);


//        Check email
        $user = User::where('email', $fields['email'])->first();

//        Check password
        if(!$user || !Hash::check($fields['password'], $user->password)) {
            return response([
                'message' => 'Email and Password does not match'
            ], 401);
        }


//        $admins = $user;
//        Notification::send($admins, new RegisteredUserNotification($user));


        $token = $user->createToken('myapptoken')->plainTextToken;


        // Retrieve the user IDs from your custom session management system
        $loggedInUserIds = Cache::get('logged_in_users', []);

        // Retrieve the users based on their IDs
        $loggedInUsers = User::whereIn('id', $loggedInUserIds)->get();

        $response = [
            'message' => 'Login Successful',
            'user' => $user,
            'token' => $token,
            'logged' => $loggedInUsers
        ];

        return response($response, 201);
        //     "token": "2|xNT0GxOowCgF65TIUL9oRgLkcCarZRS86oE1ovmg"
    }



    public function logout(Request $request){
        auth()->user()->tokens()->delete();

        return [
            'message' => 'logged out'
        ];

    }
}
